<?php

/** Routes */
const Index = 'prabesh_itonics_products';
const Create = 'prabesh_itonics_products/create';
const Show = 'prabesh_itonics_products/%product';
const Edit = 'prabesh_itonics_products/%product/edit';
const Delete = 'prabesh_itonics_products/%product/delete';
/** Messages */
const Error_Msg = 'Some Error Occured. Please try again.';
const Product_Created_Msg = 'Product Created Successfully.';
const Product_Deleted_Msg = 'Product deleted successfully.';
const Product_Updated_Msg = 'Product Updated Successfully.';
const Delete_Confirm = 'Are you sure you want to delete this product?';
// const FILE_EXISTS_RENAME = 0;

class TrAjaxCrud{
    private $id;
    private $title;
    private $type;
    private $email;
    private $summary;
    private $description;
    private $image;
    
    private static $instance = null;

    public function __construct(
                                $id = null,
                                $title = null, 
                                $type = null, 
                                $email= null, 
                                $summary = null, 
                                $description = null, 
                                $image = null
                            )
    {
        $this->_set("id", $id);
        $this->_set("title", $title);
        $this->_set("type", $type);
        $this->_set("email", $email);
        $this->_set("summary", $summary);
        $this->_set("description", $description);
        $this->_set("image", $image);
    }

    public function _set($targetVariable, $value){
        $this->$targetVariable = $value;
    }

    public function _get($targetVariable){
        
        return $this->$targetVariable;
    }

    public static function findAll($table_header, $cols, $limit){
        $query = db_select('products', 'p')->fields('p', $cols);
        $table_sort = $query->extend('TableSort')->orderByHeader($table_header);
        $pager = $table_sort->extend('PagerDefault')->limit($limit);
        $products = $pager->execute();

        return $products;
    }

    public static function findById($id, $cols){
        $product = db_select('products', 'p')
                    ->fields('p', $cols)
                    ->condition('id', $id)
                    ->execute()->fetchObject();
        
        return $product;  
    }

    public static function findCategoryIds($id, $cols){
        $category_ids = db_select('category_product', 'cp')
                        ->fields('cp', $cols)
                        ->condition('product_id', $id)
                        ->execute()->fetchAllAssoc('category_id');
        return  $category_ids;
    }

    public function attach($category_ids, $id){
        $category_product_insert_query = db_insert('category_product')
                                        ->fields(array('category_id', 'product_id'));
        foreach ($category_ids as $category) {
            $category_product_insert_query->values(
                array('category_id' => $category, 'product_id' => $id)
            );
        }
        $category_product_insert_query->execute();
        
        return true;
    }
    
    public function dettach(){
        db_delete('category_product')
        ->condition('product_id', $this->_get("id"))
        ->execute();
        
        return true;
    }

    public function updateOrCreate(){
        
        $attributes = array(
            'title' => $this->_get("title"),
            'type' => $this->_get("type"),
            'owner_email' => $this->_get("email"),
            'summary' => $this->_get("summary"),
            'description' => $this->_get("description"),
            'image' => $this->_get("image")
        );
        if(!$this->_get("id")) $query = db_insert('products');
        else $query = db_update('products')->condition('id', $this->_get("id"));
        
        $product = $query
                    ->fields($attributes)
                    ->execute();
        if(!$this->_get("id")) $this->_set("id", $product);
        
        return $this->_get("id");
    } 
    
    public function delete(){
        db_delete('products')
        ->condition('id',  $this->_get("id"))->execute();
        
        return true;
    }
}

// insert_categories();
// Catgeory Table seeder
function insert_categories()
{
    $categories = array(
        'Category A',
        'Category B',
        'Category C',
        'Category D',
        'Category E',
        'Category F',
    );

    foreach ($categories as $category) {
        $inserted = db_insert('categories')->fields(array("title" => $category))->execute();
    }
}

function tr1_ajax_crud_menu()
{
    $items = array();

    $items[Index] = array(
        'title' => t('Products List'),
        'page callback' => 'prabesh_itonics_product_list',
        'access arguments' => array('access tr1_ajax_crud index'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items[Create] = array(
        'title' => t('Create Product'),
        'page callback' => 'tr1_ajax_crud_create_page',
        'access arguments' => array('access tr1_ajax_crud create'),
        'type' => MENU_LOCAL_TASK,
    );
    $items[Show] = array(
        'title' => t('Product Details'),
        'page callback' => 'product_view_page',
        'page arguments' => array(1),
        'access arguments' => array('access tr1_ajax_crud view'),
    );
    $items[Edit] = array(
        'title' => t('Edit Product'),
        'page callback' => 'product_edit_page',
        'page arguments' => array(1),
        'access arguments' => array('access tr1_ajax_crud edit'),
    );
    $items[Delete] = array(
        'title' => t('Delete Product'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('product_delete_confirm', 1),
        'access arguments' => array('access tr1_ajax_crud delete'),
    );

    return $items;
}

/**
 * Implements hook_permission.
 */
function tr1_ajax_crud_permission() {
    return array(
      'access tr1_ajax_crud index' => array(
        'title' => t('Administer tr1_ajax_crud module'),
        'description' => t('Access the tr1_ajax_crud Page'),
       ),
       'access tr1_ajax_crud create' => array(
        'title' => t('Administer tr1_ajax_crud create'),
        'description' => t('Access the tr1_ajax_crud Page'),
       ),
       'access tr1_ajax_crud edit' => array(
        'title' => t('Administer tr1_ajax_crud edit'),
        'description' => t('Access the tr1_ajax_crud Page'),
       ),
       'access tr1_ajax_crud delete' => array(
        'title' => t('Administer tr1_ajax_crud delete'),
        'description' => t('Access the tr1_ajax_crud Page'),
       ),
       'access tr1_ajax_crud view' => array(
        'title' => t('Administer tr1_ajax_crud view'),
        'description' => t('Access the tr1_ajax_crud Page'),
       ),
    );
}

function product_load($product_id)
{
    $instance = TrAjaxCrud::findById($product_id, array('id', 'title', 'type', 'owner_email', 'summary', 'description', 'image'));
    
    return $instance;
}

/** Fetch Category Ids by Product Id
 * @params product id
 * return @array category id
 */
function fetch_categoryId_by_product($id)
{
    // $results = db_select('category_product', 'cp')->fields('cp', array('category_id'))->condition('product_id', $id)->execute()->fetchAllAssoc('category_id');
    
    $results = TrAjaxCrud::findCategoryIds($id, array('category_id'));
    $categories = array();
    foreach ($results as $current_category) {
        array_push($categories, $current_category->category_id);
    }
    
    return $categories;
}

function prabesh_itonics_product_list()
{

    $table_header = array(
        array('data' => t('S.No.'), 'field' => 'id'),
        array('data' => t('Title'), 'field' => 'title', 'sort' => 'desc'),
        array('data' => t('Type'), 'field' => 'type'),
        array('data' => t('Owner Email'), 'field' => 'owner_email'),
        array('data' => t('Summary'), 'field' => 'summary'),
        array('data' => t('description'), 'field' => 'description'),
        array('data' => t('Image'), 'field' => 'image'),
        array('data' => t('Action')),
    );

    $result = TrAjaxCrud::findAll($table_header, array('id', 'title', 'type', 'owner_email',  'summary', 'description', 'image'), 10);

    $rows = array();
    $i = 0;
    foreach ($result as $res) {
        $view = user_access('access tr1_ajax_crud view') ? "<a href='" . Index . "/" . $res->id . "'>View</a>" : "";
        $edit = user_access('access tr1_ajax_crud edit') ? " / <a href='" . Index . "/" . $res->id . "/edit'>Edit</a>" : "";
        $delete = user_access('access tr1_ajax_crud edit') ? " / <a href='" . Index . "/" . $res->id . "/delete'>Delete</a>" : "";
        
        $rows[] = array(
            ++$i,
            $res->title,
            $res->type,
            $res->owner_email,
            $res->summary,
            $res->description,
            $res->image ? '<img src="' . file_create_url($res->image) . '" width="50" height="50" />' : null,
            $view.$edit.$delete,
        );
    }

    $output = user_access('access tr1_ajax_crud create') ? '<a href="' . Create . '" style="float:right;">Add Product</a><br/>' : "";

    if (!empty($rows)) {
        $output .= theme('table', array('header' => $table_header, 'rows' => $rows, 'attributes' => array('title' => 'sort-table')));
        $output .= theme('pager');
    } else {
        $output .= t("No products.");
    }
    return $output;
}

function tr1_ajax_crud_create_page()
{
    return drupal_get_form('tr1_ajax_crud_form', null);
}

function product_edit_page($product)
{
    $categories = fetch_categoryId_by_product($product->id);
    return drupal_get_form('tr1_ajax_crud_form', $product, $categories);
}

function product_view_page($product)
{
    $current_categories_results = fetch_categoryId_by_product($product->id);
    $query_categories = db_select('categories', 'c')->fields('c', array('title'))
        ->condition('id', $current_categories_results, 'IN')->execute()->fetchAllAssoc('title');
    $categories = implode(', ', array_keys($query_categories));

    $output = $product->image ? '<img src="' . file_create_url($product->image) . '" width="200" height="200" />' : null;

    $table_header = array();
    $rows[] = array(
        "Title",
        $product->title,
    );
    $rows[] = array(
        "Type",
        $product->type,
    );
    $rows[] = array(
        "Owner Email",
        $product->owner_email,
    );
    $rows[] = array(
        "Categories",
        $categories,
    );
    $rows[] = array(
        "Summary",
        $product->summary,
    );
    $rows[] = array(
        "Description",
        $product->description,
    );

    if (!empty($rows)) {
        $output .= theme('table', array('header' => $table_header, 'rows' => $rows, 'attributes' => array('title' => 'sort-table')));
    } else {
        $output = t("Product Not found.");
    }
    return $output;
}

function product_delete_confirm($form, &$form_state, $product)
{
    $form['_product'] = array(
        '#type' => 'value',
        '#value' => $product,
    );
    return confirm_form($form, 
                        t(Delete_Confirm),
                        isset($_GET['destination']) ? $_GET['destination'] : "product", 
                        null, 
                        t('Delete'), t('Cancel')
                      );
}

function product_delete_confirm_submit($form, &$form_state)
{
    $form_values = $form_state['values'];
    if ($form_state['values']['confirm']) {
        $product_instance = $form_state['values']['_product'];
        $product_id = $product_instance->id;

        if ($product_instance->image) {
            if (file_exists($product_instance->image)) {
                drupal_unlink($product_instance->image);
            }
        }

        $transaction = db_transaction();
        try {
            $product = new TrAjaxCrud($product_id);
            $product->dettach();
            $product->delete();

            drupal_set_message(t(Product_Deleted_Msg));
        } catch (Exception $e) {
            $transaction->rollback();
            watchdog_exception('my_type', $e);
            drupal_set_message(t(Error_Msg));
        }
        
    }

    $form_state['redirect'] = Index;
}

function tr1_ajax_crud_form($form, &$form_state, $instance, $current_categories = array())
{
    drupal_add_js(drupal_get_path('module', 'tr1_ajax_crud') . '/js/custom.js');
    $form['title'] = array(
        '#title' => t('Product Name'),
        '#type' => 'textfield',
        '#id' => 'input_title',
        '#suffix' => '<div class="validation-error-msg" id="input-title-error-msg" style="color:red"></div>',
        '#required' => true,
        '#default_value' => $instance ? $instance->title : "",
    );
    $fetch_categories = db_select('categories', 'n')
        ->fields('n')
        ->execute()->fetchAll();
    $categories = array();
    foreach ($fetch_categories as $category) {
        $categories[$category->id] = t($category->title);
    }
    
    $form['category'] = array(
        '#type' => 'select',
        '#title' => t('Categories'),
        '#options' => $categories,
        '#multiple' => true,
        '#required' => true,
        '#default_value' => $instance ? $current_categories : "",
        '#id' => 'input_category',
        '#suffix' => '<div class="validation-error-msg" id="input-category-error-msg" style="color:red"></div>',
    );
    $type = array('Active' => t('Active'), 'Inactive' => t('Inactive'));
    $form['type'] = array(
        '#type' => 'radios',
        '#title' => t('Type'),
        '#default_value' => isset($instance) ? $instance->type : 'Active',
        '#options' => $type,
        '#id' => 'input_type',
        '#suffix' => '<div class="validation-error-msg" id="input-type-error-msg" style="color:red"></div>',
    );

    $form['owner_email'] = array(
        '#title' => t('Email'),
        '#type' => 'textfield',
        '#required' => true,
        '#default_value' => $instance ? $instance->owner_email : "",
        '#id' => 'input_owner_email',
        '#suffix' => '<div class="validation-error-msg" id="input-owner_email-error-msg" style="color:red"></div>',
    );

    $form['summary'] = array(
        '#title' => t('Summary'),
        '#type' => 'textarea',
        '#rows' => 3,
        '#description' => t('A short product summary'),
        '#default_value' => $instance ? $instance->summary : "",
        '#id' => 'input_summary',
        '#suffix' => '<div class="validation-error-msg" id="input-summary-error-msg" style="color:red"></div>',
    );

    $form['description'] = array(
        '#title' => t('Description'),
        '#description' => t('A short product description'),
        '#format' => 'filtered_html',
        '#type' => 'text_format',
        '#rows' => 5,
        '#resizable' => false,
        '#default_value' => $instance ? $instance->description : "",
        '#id' => '#input_description',
        '#suffix' => '<div class="validation-error-msg" id="input-description-error-msg" style="color:red"></div>',
    );

    $form['image'] = array(
        '#type' => 'file',
        '#title' => t('Choose an image'),
        '#description' => t('File must be of given types: png gif jpg jpeg'),
        '#id' => '#input_image',
        '#suffix' => '<span class="validation-error-msg" id="input-image-error-msg" style="color:red"></span>',
    );

    if ($instance) {
        $form['id'] = array('#type' => 'hidden', '#value' => $instance->id);
    }

    // Provide a submit button.
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
        '#ajax' => array(
            'callback' => 'tr1_ajax_crud_form_ajax_submit',
            'wrapper' => '',
            'event' => 'click'
        ),
    );

    return $form;
}

function tr1_ajax_crud_form_validate($form, &$form_state)
{
    if (array_key_exists('id', $form_state['values'])) {
        $product_instance = TrAjaxCrud::findById($form_state['values']['id'], array('id', 'image'));
        $form_state['values']['image'] = $product_instance->image;
    }

    if (!empty($_FILES['files']['tmp_name']['image'])) {
        $validators = array(
            'file_validate_is_image' => array(),
            'file_validate_size' => array(0),
            'file_validate_extensions' => array('png gif jpg jpeg'),
        );

        try {
            $file = file_save_upload('image', $validators, 'public://', $replace = 0);
        } catch (Exception $e) {
            $commands = array();
            $commands[] = ajax_command_invoke('#input_image', 'addClass', array('error'));
            $commands[] = ajax_command_html('#input-image-error-msg', t($e->getMessage()));
            print ajax_render($commands);
            drupal_exit();
        }


        if (!empty($file)) {

            $form_state['values']['image'] = $file->uri;
            if (array_key_exists('id', $form_state['values'])) {
                // Delete Current Image
                if ($product_instance->image) {
                    if (file_exists($product_instance->image)) {
                        drupal_unlink($product_instance->image);
                    }
                }
            }
        } else {
            $commands = array();
            $commands[] = ajax_command_invoke('#input_image', 'addClass', array('error'));
            $commands[] = ajax_command_html('#input-image-error-msg', t('Image cannot be uploaded. Please try again.'));
            print ajax_render($commands);
            drupal_exit();
            // return false;
        }
    }

    // return true;
}

function tr1_ajax_crud_form_ajax_submit($form, &$form_state)
{
    $transaction = db_transaction();
    try {
        $form_elements = $form_state['values'];

        if($form_elements['title'] == "") {
            form_set_error('title', t('Product name is required.'));
        }

        if (strlen($form_elements['title']) > 191) {
            form_set_error('title', t('Maximum length of title is 10 characters.'));
        }

        if($form_elements['owner_email'] == "") {
            form_set_error('owner_email', t('Email field is required.'));
        }

        if (!filter_var($form_elements['owner_email'], FILTER_VALIDATE_EMAIL)) {
            form_set_error('owner_email', t('Please enter a valid email address.'));
        }

        if (!in_array($form_state['values']['type'], array('Active', 'Inactive'))) {
            form_set_error('type', t('Invalid value.'));
        }

        if (strlen($form_elements['summary']) > 255) {
            form_set_error('title', t('Maximum length of summary is 255 characters.'));
        }    

        $error = form_get_errors();
        $commands = array();
        $required_fields = array('title', 'owner_email');

        $product_id = array_key_exists('id', $form_state['values']) ? $form_state['values']['id'] : null;
        if ($error) {
            $commands[] = array("command" => 'loadDefaultMrd');
            
            foreach ($form_elements as $row => $value) {
                //'title'
                if (isset($error[$row])) {
                    $commands[] = ajax_command_invoke('#input_' . $row, 'addClass', array('error'));
                    $commands[] = ajax_command_html('#input-' . $row . '-error-msg', $error[$row]);
                } else {
                    $commands[] = ajax_command_invoke('#input_' . $row, 'removeClass', array('error'));
                    $commands[] = ajax_command_html('#input-' . $row . '-error-msg', '');
                }
            }
        } else {
            $commands[] = ajax_command_html('.validation-error-msg', '');

            $product = new TrAjaxCrud(
                                                $product_id,
                                                $form_elements['title'], 
                                                $form_elements['type'], 
                                                $form_elements['owner_email'], 
                                                $form_elements['summary'], 
                                                $form_elements['description']['value'], 
                                                $form_elements['image']
                                            );
            $inserted_id = $product->updateOrCreate();
            if ($product_id) {    
                $product->dettach();
                $msg = Product_Updated_Msg;
            } else {
                $msg = Product_Created_Msg;
            }
    
            $product->attach($form_elements['category'], $inserted_id);
            
            drupal_set_message(t('Segment saved.'));
            $commands[] = ajax_command_invoke(null, 'redirect', array('/prabesh_itonics_products'));
        }
    } catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('my_type', $e);
        drupal_set_message(t(Error_Msg));
    }

    print ajax_render($commands);
    drupal_exit();

}

